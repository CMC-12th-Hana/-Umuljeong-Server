spring:
  profiles:
    active: dev
springdoc:
  use-fqn: true
---
spring:
  config:
    activate:
      on-profile: local
  datasource: # DB? ???? ?? DataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}
    url: ${LOCAL_DB_URL}
  output:
    ansi:
      enabled: always # ???? ?? ??? ????

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show_sql: true # JPA? ???? ??? ??
        format_sql: false # ?? ?? ????? ??? (???, ? ?)
        use_sql_comments: false # ???? ??? ???
        hbm2ddl:
          auto: create
        default_batch_fetch_size: 1000 # JPA?? ????? ??? default_batch_fetch_size ???? ?????? ?? ???? ???? IN?? ??? ??? ??

logging:
  level:
    org:
      hibernate:
        type: trace # ??? ????? ?? ?? ?? ????? ??

jwt:
  header: Authorization
  secret: ${JWT_SECRET}
  token-validity-in-seconds: 86400

---
spring:
  config:
    activate:
      on-profile: dev
  datasource: # DB? ???? ?? DataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${AWS_DB_USERNAME}
    password: ${AWS_DB_PASSWORD}
    url: ${AWS_DB_URL}
  output:
    ansi:
      enabled: always # ???? ?? ??? ????

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show_sql: true # JPA? ???? ??? ??
        format_sql: false # ?? ?? ????? ??? (???, ? ?)
        use_sql_comments: false # ???? ??? ???
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000 # JPA?? ????? ??? default_batch_fetch_size ???? ?????? ?? ???? ???? IN?? ??? ??? ??

  servlet:
    multipart:
      maxFileSize: 20MB
      maxRequestSize: 30MB


logging:
  level:
    org:
      hibernate:
        type: trace # ??? ????? ?? ?? ?? ????? ??

jwt:
  header: Authorization
  secret: ${JWT_SECRET}
  authorities-key: ${JWT_AUTHORITIES_KEY}
  access-token-validity-in-seconds: 1800000 # 30 m
  refresh-token-validity-in-seconds: 1210000000 # 14 d

cool-sms:
  api-key: ${COOL_SMS_API_KEY}
  api-secret: ${COOL_SMS_API_SECRET}
  from-number: ${COOL_SMS_FROM_NUMBER}
  domain: ${COOL_SMS_DOMAIN}

cloud:
    aws:
      s3:
        bucket: field-mate
        folder:
          task-image: task-image
      region:
        static: ap-northeast-2
      stack:
        auto: false
      credentials:
        accessKey: ${AWS_ACCESS_KEY_ID}
        secretKey: ${AWS_SECRET_ACCESS_KEY}
      cloudFront:
        distributionDomain: https://d3j1uqx77q4q2.cloudfront.net

---
spring:
  config:
    activate:
      on-profile: prod
  datasource: # DB? ???? ?? DataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${aws.db.username}
    password: ${aws.db.password}
    url: ${aws.db.url}
  output:
    ansi:
      enabled: always # ???? ?? ??? ????

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show_sql: true # JPA? ???? ??? ??
        format_sql: true # ?? ?? ????? ??? (???, ? ?)
        use_sql_comments: true # ???? ??? ???
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000 # JPA?? ????? ??? default_batch_fetch_size ???? ?????? ?? ???? ???? IN?? ??? ??? ??

  servlet:
    multipart:
      maxFileSize: 20MB
      maxRequestSize: 30MB

logging:
  level:
    root: info
    sql: info
jwt:
  header: Authorization
  secret: ${jwt.secret}
  authorities-key: ${jwt.authorities.key}
  access-token-validity-in-seconds: 1800000 # 30 m
  refresh-token-validity-in-seconds: 1210000000 # 14 d

cool-sms:
  api-key: ${cool.sms.api.key}
  api-secret: ${cool.sms.api.secret}
  from-number: ${cool.sms.from.number}
  domain: ${cool.sms.domain}

cloud:
  aws:
    s3:
      bucket: field-mate
      folder:
        task-image: task-image
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      accessKey: ${aws.access.key.id}
      secretKey: ${aws.secret.access.key}
    cloudFront:
      distributionDomain: https://d3j1uqx77q4q2.cloudfront.net